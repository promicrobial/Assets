#!/bin/bash

#######################################
#                                     #
#       Bash helper functions         #
#                                     #
#######################################

##############################################################################
# Author: Nathaniel Cole (nc564@cornell.edu)                                 #
# Date: 05-12-24                                                             #
# License: MIT                                                               #
# Version: 1.0                                                               #
# Description: A file of commonly used functions. Provides logging, error    #
# handling, and other shared functionality.                                  #
# Usage: source utils/bash-utils                                             #
#                                                                            #
# Last updated: 09-04-25                                                     #
##############################################################################

# Ensure the script is being sourced, not executed
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo "This script should be sourced, not executed directly."
    exit 1
fi

################################################################################
# Global Variables and Settings                                                 #
################################################################################

# Default values (can be overridden by the sourcing script)
# syntax prevents overwriting variables that are already set
# will only be assigned if variables are empty
: "${DEBUG:=false}"
: "${DRY_RUN:=false}"
: "${KEEP_TEMP:=false}"
: "${THREADS:=16}"
: "${COMPRESS_LEVEL:=5}"
: "${LOG_FILE:=}"
: "${TMP:=TMP=$(mktemp -d -p ./)}"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;36m'
NC='\033[0m' # No Color

################################################################################
# Argument Parsing Functions                                                    #
################################################################################

# Function: parse_arguments
# Description: Parses command line arguments and validates required parameters
# Arguments: Command line arguments ($@)
# Sets global variables based on parsed arguments
# Usage: parse_arguments "$@"
parse_arguments() {
    # Initialize local variables
    local print_help=false
    local print_version=false
    
    # Initialize default values
    INPUT=""
    CONFIG_FILE="default.conf"
    OUTPUT_DIR="./output"
    LOG_FILE="./output/$(date +%Y%m%d_%H%M).log"
    OUTPUT_FILENAME="./output/$(date +%Y%m%d_%H%M).out"
    THREADS=16
    VERBOSE=false
    DEBUG=false
    KEEP_TEMP=false
    DRY_RUN=false

    # If no arguments provided, show usage
    if [[ $# -eq 0 ]]; then
        help
        exit 1
    fi

    # Parse command line options
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                help
                exit 0
                ;;
            -V|--version)
                version
                exit 0
                ;;
            -i|--input)
                if [[ -z "$2" || "$2" =~ ^- ]]; then
                    log_error "Input file required for $1"
                    exit 1
                fi
                INPUT="$2"
                shift 2
                ;;
            -c|--config)
                if [[ -z "$2" || "$2" =~ ^- ]]; then
                    log_error "Config file required for $1"
                    exit 1
                fi
                CONFIG_FILE="$2"
                shift 2
                ;;
            -o|--output)
                if [[ -z "$2" || "$2" =~ ^- ]]; then
                    log_error "Output directory required for $1"
                    exit 1
                fi
                OUTPUT_DIR="$2"
                shift 2
                ;;
            -l|--log)
                if [[ -z "$2" || "$2" =~ ^- ]]; then
                    log_error "Log file path required for $1"
                    exit 1
                fi
                LOG_FILE="$2"
                shift 2
                ;;
            -t|--threads)
                if [[ -z "$2" || "$2" =~ ^- ]]; then
                    log_error "Number of threads required for $1"
                    exit 1
                fi
                THREADS="$2"
                shift 2
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -d|--debug)
                DEBUG=true
                shift
                ;;
            -k|--keep-temp)
                KEEP_TEMP=true
                shift
                ;;
            --dry-run)
                DRY_RUN=true
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                help
                exit 1
                ;;
        esac
    done

    # Validate required arguments
    if [[ -z "$INPUT" ]]; then
        log_error "Required argument missing: -i/--input"
        help
        exit 1
    fi

    if [[ -z "$CONFIG_FILE" ]]; then
        log_error "Required argument missing: -c/--config"
        help
        exit 1
    fi

    # Validate input file exists
    if [[ ! -f "$INPUT" ]]; then
        log_error "Input file does not exist: $INPUT"
        exit 1
    fi

    # Validate config file exists
    if [[ ! -f "$CONFIG_FILE" ]]; then
        log_error "Config file does not exist: $CONFIG_FILE"
        exit 1
    fi

    # Validate threads is a positive integer
    if ! [[ "$THREADS" =~ ^[1-9][0-9]*$ ]]; then
        log_error "Threads must be a positive integer"
        exit 1
    fi

    # Create output directory if it doesn't exist
    if [[ ! -d "$OUTPUT_DIR" ]]; then
        if ! mkdir -p "$OUTPUT_DIR"; then
            log_error "Failed to create output directory: $OUTPUT_DIR"
            exit 1
        fi
    fi

    # Set up logging if specified
    if [[ -n "$LOG_FILE" ]]; then
        # Create log directory if it doesn't exist
        local log_dir
        log_dir=$(dirname "$LOG_FILE")
        if [[ ! -d "$log_dir" ]]; then
            if ! mkdir -p "$log_dir"; then
                log_error "Failed to create log directory: $log_dir"
                exit 1
            fi
        fi
        # Test if we can write to the log file
        if ! touch "$LOG_FILE" 2>/dev/null; then
            log_error "Cannot write to log file: $LOG_FILE"
            exit 1
        fi
    fi

    # Log settings if in debug mode
    if [[ "$DEBUG" == true ]]; then
        log_debug "Settings:"
        log_debug "  Input: $INPUT"
        log_debug "  Config: $CONFIG_FILE"
        log_debug "  Output Directory: $OUTPUT_DIR"
        log_debug "  Output Filename: $OUTPUT_FILENAME"
        log_debug "  Log File: ${LOG_FILE:-none}"
        log_debug "  Threads: $THREADS"
        log_debug "  Verbose: $VERBOSE"
        log_debug "  Debug: $DEBUG"
        log_debug "  Keep Temp: $KEEP_TEMP"
        log_debug "  Dry Run: $DRY_RUN"
    fi

    return 0
}

################################################################################
# Logging Functions                                                            #
################################################################################

# Function: log
# Description: Central logging function that handles all script output
# Arguments:
#   $1: Log level (INFO, WARN, ERROR, DEBUG)
#   $2+: Message to log
# Usage: log "INFO" "Processing started"
log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Color output based on log level
    case "$level" in
        "INFO") local color="${GREEN}" ;;  # Green
        "WARN") local color="${YELLOW}" ;;  # Yellow
        "ERROR") local color="${RED}" ;; # Red
        "DEBUG") local color="${BLUE}" ;; # Blue
        *) local color="${NC}" ;;         # Default
    esac
    local reset="${NC}"
    
    # Print to stderr so stdout can be used for data
    echo -e "${color}[$timestamp] $level: $message${reset}" >&2
}

# Convenience functions for different log levels
log_info() { log "INFO" "$@"; }
log_warn() { log "WARN" "$@"; }
log_error() { log "ERROR" "$@"; }
log_debug() {
    if [[ "$DEBUG" == "true" ]]; then
        log "DEBUG" "$@"
    fi
}

################################################################################
# Command Execution                                                            #
################################################################################

# Function: execute
# Description: Executes commands or simulates their execution in dry-run mode
# Arguments:
#   Command and its arguments to execute
# Usage: execute samtools sort input.bam
execute() {
    # Log command if in debug mode
    if [[ "$DEBUG" == "true" ]]; then
        log_debug "Executing: $*"
    elif [[ "$VERBOSE" == "true" ]]; then
        log_info "Running: $*"
    fi

    # In dry-run mode, just print the command
    if [[ "$DRY_RUN" == "true" ]]; then
        echo "Would execute: $*"
        return 0
    fi

    # Execute the command
    if ! "$@"; then
        log_error "Command failed: $*"
        return 1
    fi

    return 0
}

################################################################################
# Dependency Management                                                        #
################################################################################

# Function: verify_dependencies
# Description: Verifies that required tools are available
# Arguments:
#   $1: Array of required tools
# Usage: verify_dependencies "${TOOLS[@]}"
verify_dependencies() {
    local missing_deps=0
    local deps=("$@")
    
    log_info "Checking dependencies..."
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            log_error "Missing dependency: $dep"
            missing_deps=1
        fi
    done
    
    if [ $missing_deps -eq 1 ]; then
        log_error "Please install missing dependencies and try again."
        return 1
    fi
    
    log_info "All dependencies are satisfied."
    return 0
}

################################################################################
# File and Directory Management                                               #
################################################################################

# Function: create_directory
# Description: Creates a directory if it doesn't exist
# Arguments:
#   $1: Directory path
# Usage: create_directory "/path/to/dir"
create_directory() {
    local dir=$1
    
    if [[ ! -d "$dir" ]]; then
        log_debug "Creating directory: $dir"
        if ! mkdir -p "$dir"; then
            log_error "Failed to create directory: $dir"
            return 1
        fi
    else
        log_debug "Directory already exists: $dir"
    fi
    
    return 0
}
# Function: cleanup
# Description: Removes temporary files unless KEEP_TEMP is true
# Arguments:
#   $1: Directory or file to clean up
# Usage: cleanup "/path/to/temp"
cleanup() {
    local target=$1
    if [[ -e "$target" ]]; then
        if [[ "$KEEP_TEMP" == "false" ]]; then
            log_info "Cleaning up: $target"
            if ! rm -rf "$target"; then
                log_warn "Failed to remove temporary files: $target"
            fi
        else
            log_debug "Keeping temporary files: $target"
        fi
    fi
}

cleanup2() {
    local exit_code=$?
    if [ $exit_code -ne 0 ]; then
        log_error "Script failed with exit code $exit_code"
    fi
    
    if [ $KEEP_TEMP -eq 0 ]; then
        log_info "Cleaning up temporary files..."
        rm -f "$OUTPUT_DIR"/*_reference.fa "$OUTPUT_DIR"/*_variants.vcf* "$OUTPUT_DIR"/*_"${OUTPUT_FILENAME}"
    else
        log_info "Keeping temporary files as requested"
    fi
    
    # Remove lock file if it exists
    [ -f "${OUTPUT_DIR}/.lock" ] && rm -f "${OUTPUT_DIR}/.lock"
    
    exit $exit_code
}

# Function: setup_lock
# Description: Creates a .lock file, preventing parallel execution
# Arguments: none
# Usage: setup_lock
setup_lock() {
    local lock_file="${OUTPUT_DIR}/.lock"
    
    # Does a lock file already exist
    if [[ -f "$lock_file" ]]; then
        # Determine if the process is still running
        local pid
        pid=$(cat "$lock_file")
        if kill -0 "$pid" 2>/dev/null; then
            log_error "Another instance is running (PID: $pid)"
            log_error "If this is incorrect, remove: $lock_file"
            exit 1
        else
            # Stale lock file from crashed process
            log_warn "Removing stale lock file from PID $pid"
            rm -f "$lock_file"
        fi
    fi
    
    # Create lock file with current PID
    echo $$ > "$lock_file"
    
    # Remove lock file on script exit
    trap 'rm -f "$lock_file"' EXIT
}

################################################################################
# Configuration Management                                                     #
################################################################################

# Function: parse_config_file
# Description: Reads and processes a configuration file
# Arguments:
#   $1: Path to configuration file
#   $2: Array of required variables
# Usage: parse_config_file "config.conf" "VAR1 VAR2 VAR3"
parse_config_file() {
    local config_file=$1
    local required_vars=($2)
    
    if [[ ! -f "$config_file" ]]; then
        log_error "Configuration file not found: $config_file"
        return 1
    fi
    
    log_debug "Parsing configuration file: $config_file"
    
    # Source the config file
    source "$config_file"
    
    # validate required variables
    local missing_vars=0
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var+x}" ]]; then
            log_error "Required variable not set in config: $var"
            missing_vars=1
        fi
    done
    
    if [[ $missing_vars -eq 1 ]]; then
        return 1
    fi
    
    return 0
}

################################################################################
# Time and Duration Functions                                                 #
################################################################################

# Function: format_duration
# Description: Formats seconds into human-readable duration
# Arguments:
#   $1: Duration in seconds
# Usage: format_duration "$duration"
format_duration() {
    local seconds=$1
    local hours=$((seconds / 3600))
    local minutes=$(( (seconds % 3600) / 60 ))
    local secs=$((seconds % 60))
    printf "%02dh:%02dm:%02ds" $hours $minutes $secs
}

################################################################################
# Validation Functions                                                        #
################################################################################

# Function: verify_input_files
# Description: Verify input files exist
# Arguments: none
verify_input_files() {
    if [[ -z "${INPUT:-}" ]]; then
        log_error "Input file not specified"
        help
        exit 1
    fi

    if [[ ! -f "$INPUT" ]]; then
        log_error "Input file not found: $INPUT"
        exit 1
    fi
}

verify_gfa_file() {
    log_debug "Verifying input files"
    
    # Check if input file is specified
    if [[ -z "${INPUT:-}" ]]; then
        log_error "Input file not specified"
        help
        exit 1
    fi

    # Check if input file exists
    if [[ ! -f "$INPUT" ]]; then
        log_error "Input file not found: $INPUT"
        exit 1
    fi

    # Check if input file is readable
    if [[ ! -r "$INPUT" ]]; then
        log_error "Input file is not readable: $INPUT"
        exit 1
    fi

    # Verify file appears to be a GFA file
    if [[ "$INPUT" != *.gfa && "$INPUT" != *.gfa.gz ]]; then
        log_warn "Input file does not have .gfa or .gfa.gz extension: $INPUT"
        read -p "Continue anyway? [y/N] " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi

    log_debug "Input file verification complete"
    return 0
}

# Function: validate_integer
# Description: Validates that a value is a positive integer
# Arguments:
#   $1: Value to validate
#   $2: Variable name for error message
# Usage: validate_integer "$value" "THREADS"
validate_integer() {
    local value=$1
    local name=$2
    
    if ! [[ "$value" =~ ^[0-9]+$ ]] || [ "$value" -lt 1 ]; then
        log_error "$name must be a positive integer"
        return 1
    fi
    return 0
}

# Function: validate_float
# Description: Validates that a value is a float between 0 and 1
# Arguments:
#   $1: Value to validate
#   $2: Variable name for error message
# Usage: validate_float "$value" "PROPORTION"
validate_float() {
    local value=$1
    local name=$2
    
    if ! [[ "$value" =~ ^[0-9]*\.?[0-9]+$ ]] || 
       [ $(echo "$value < 0 || $value > 1" | bc) -eq 1 ]; then
        log_error "$name must be a float between 0 and 1"
        return 1
    fi
    return 0
}

verify_output_directory() {
    local dir=$1
    
    log_debug "Verifying output directory: $dir"
    
    # Create output directory if it doesn't exist
    if [[ ! -d "$dir" ]]; then
        log_info "Creating output directory: $dir"
        if ! mkdir -p "$dir"; then
            log_error "Failed to create output directory: $dir"
            exit 1
        fi
    fi

    # Check if directory is writable
    if [[ ! -w "$dir" ]]; then
        log_error "Output directory is not writable: $dir"
        exit 1
    }

    log_debug "Output directory verification complete"
    return 0
}

################################################################################
# Script Information                                                          #
################################################################################

# Function: version
# Description: Displays version information
# Arguments: None
# Usage: version
version() {
    echo "$NAME version $VER"
    # Version control integration point:
    # Could add git commit hash, build date, etc. here
    exit 0
}
